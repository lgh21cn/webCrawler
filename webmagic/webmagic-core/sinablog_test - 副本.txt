Time:2009-12-25 10:47:20
Title:分治算法的一点思考--为什么大多使用二分法？
Content:    分治思想在排序以及查找算法中使用广泛，如二分查找、归并排序、快速排序。我们知道这些算法的时间复杂度分别是Ο(log2n)，Ο(nlog2
n),Ο(nlog2n)，而底数2显然是因为使用了2分策略导致的。那么,假设我们使用3分甚至m分法，时间复杂度不就变成了Ο(logmn)，Ο(nlogm
n),Ο(nlogmn)，岂不是更快？
    这是一个很有迷惑性的想法。咋一看没什么错，但是仔细推敲，有2点考虑不周：
 1、logmn与log2n的关系：log2n/logmn=log2m。log2m其实是一个常数，所以Ο(log2n)与Ο(logm
n)是等价的，这也是估计时间复杂度时从来只用以2为底的对数的原因。
 2、m分法很可能要花费更多的开销。例如：
    假设有一个2分查找binaryseek(A,p,r,n)，它以A[(p+r)/2]为比较对象，则每次递归需要进行1次比较：
 binaryseek(A,p,r,n)
    begin
      if p==r{1} then output A[p]      
      else begin
            m :=(p+r)/2;
            if n<=A[m]{2} then binaryseek(A,p,m-1)
            else if n==A[m]{3} then output A[m]
            else binaryseek(A,m+1,r)
           end
    end
 这个算法的时间复杂度为Ο(log2n)，而实际最坏情况T(n) = 3T(log2n)，期望时间为E(T)=2.5T(log2n)。（记一次比较为T(1)）
 如果改成3分呢？
 binaryseek(A,p,r,n)
    begin
      if p==r{1} then output A[p]      
      else begin
            m1 :=(p+r)/3;
            m2 :=(p+r)/3*2;
            if n<A[m1]{2} then binaryseek(A,p,m1-1)
            else if n==A[m1]{3} then output A[m1]
            else begin
                  if n<A[m2]{4} then
                      binaryseek(A,m1+1,m2-1)
                  else if n==A[m2]{5} then output A[m2]
                  else binaryseek(A,m2+1,r)
           end
    end
     这个算法的时间复杂度仍旧为Ο(log2n)，而实际最坏情况T(n) = 5T(log3n)，期望时间为E(T)=3.667T
 (log3n)。（记一次比较为T(1)）
     比较之下，发现3T(log2n)<5T(log3n)，2.5T(log2n)<3.667T(log3
n)，可见二分法不但编写比较容易，在花费时间上也是较少的。
     那么m分法呢？可以估计最坏情况下，m分法要比较(m-1)*2+1次，列函数f(m)=((m-1)*2+1)/(3*log2
m)，可得f(m)递增，f(2) = 1。所以2分法要优于m分法。
 另外想到一个有趣的题目：
 如何写3分法的快速排序以及m分法的快速排序？
 快速排序quicksort(A,p,r)的算法为：
 quicksort(A,p,r)
    if p<r
      m = partition(A,p,r)
      quicksort(A,p,m-1)
      quicksort(A,m+1,r)
 partition(A,p,r)过程如下:
 partition(A,p,r)
    q = p-1;
    for (i = p;i<r;i++)
     if (s[i]<=s[r]) {
      q++;
      exchange(i,q)
     }
 exchange(q+1,r)
 return q+1;
   思想就是按照A[r]为标准将A一分为二，小于A[r]的在左边，大于A[r]的在右边。
   
那么三分法自然就可以取A[r-1]、A[r]作为标准了。这里可以先将A[r-1]、A[r]进行排序，将较小的放在前面这样比较的时候可以有效的减少次数。这样的话时间复杂度跟二分查找就类似了。T(m分法):T(2分法)=f(m)=((m-1)*2+1)/(3*log
2m)。
       

